/*
 * generated by Xtext 2.30.0
 */
package webtest.dsl.tests

import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test

class ParseTests extends ParseTestBase {
	@Test
	def void testMain() {
		parse(
		'''
		webtest example.ExampleTest
		''')
	}
	
	@Test
	def void testPage() {
		parse(
		'''
		webtest example.ExampleTest
		
		page Calculator
		  element display = input "number display"
		  element clear = button "AC"
		  element add = button "+"
		  element subtract = button "-"
		  element multiply = button "Ã—"
		  element divide = button "/"
		  element compute = button "="
		  
		  operation binaryOperation(string left, element op, string right)
		    click clear
		    fill display with left
		    click op
		    fill display with right
		    click compute
		  end
		  
		  operation multiply(string left, string right)
		    binaryOperation using left, multiply, right
		  end
		end
		''')
	}
		
	@Test
	def void testTestCase() {
		parse(
		'''
		webtest example.ExampleTest
		
		test mul1
		  open "https://www.calculatorsoup.com/calculators/math/basic.php"
		  print "Page opened"
		end
		''')
	}
	
			
	@Test
	def void testOperation() {
		parse(
		'''
		webtest example.ExampleTest
		
		operation op0
			print "Hello"
		end		

		operation op1(boolean a)
			op0
			print a
		end		

		operation op2(boolean a, integer b)
			op1 using a
			print a, b
		end		

		operation op3(boolean a, integer b, string c)
			op2 using a, b
			print a, b, c
		end		
		''')
	}
	
	@Test
	def void testBody() {
		parse(
		'''
		webtest example.ExampleTest
		
		open "https://www.calculatorsoup.com/calculators/math/basic.php"
		print "Page opened"
		''')
	}
	
	@Test
	def void testIsExpression() {
		parse(
		'''
		webtest example.ExampleTest

		operation op1(element a, string b)
			boolean c = a is b
			boolean d = input "password" is "secret"
			string s = "secret"
			boolean e = input "password" is s
			element p = input "password"
			boolean f = p is s
		end	
		''');
	}	
	
	@Test
	def void testContainsExpression() {
		parse(
		'''
		webtest example.ExampleTest

		operation op1(element a, string b)
			boolean c = a contains b
			boolean d = input "password" contains "secret"
			string s = "secret"
			boolean e = input "password" contains s
			element p = input "password"
			boolean f = p is s
		end		
		''');
	}	
	
	@Test
	def void testExistsExpression() {
		parse(
		'''
		webtest example.ExampleTest

		operation op1(element a)
			boolean c = a exists
			boolean d = input "password" exists
			boolean e = input "password" exists
			element p = input "password"
			boolean f = p exists
		end		
		''');
	}	
	
	@Test
	def void testNotExpression() {
		parse(
		'''
		webtest example.ExampleTest

		operation op1(boolean a)
			boolean c = not a
			boolean d = not true
		end		
		''');
	}	
		
	@Test
	def void testNotExistsExpression() {
		parse(
		'''
		webtest example.ExampleTest

		operation op1(boolean a)
			boolean c = not a exists
			boolean d = not button "log in" exists
			boolean e = not button "log in" exists
			element b = button "log in"
			boolean f = not b exists
		end		
		''');
	}
	
	@Test
	def void testConstantExpression() {
		parse(
		'''
		webtest example.ExampleTest

		string a = "hello"
		integer b = 5
		boolean c = true
		element d = input "q"
		string e = a
		integer f = b
		boolean g = c
		element h = d 
		''');
	}	
	
	@Test
	def void testIfStatement() {
		parse(
		'''
		webtest example.ExampleTest

		operation op1(boolean a)
			if a then
				print "true"
			else
				print "false"
			end
			if true then
				print "true"
			else
				print "false"
			end
			if input "password" exists then
				print "true"
			else
				print "false"
			end
		end		
		''');
	}	
	
	@Test
	def void testWhileStatement() {
		parse(
		'''
		webtest example.ExampleTest

		operation op1(boolean a)
			while a do
				print "while"
			end
			while button "next" exists do
				click button "next"
			end
		end		
		''');
	}	
	
	@Test
	def void testCallStatement() {
		parse(
		'''
		webtest example.ExampleTest

		operation op1(boolean a, element b, string c, integer d)
			if a then
			    fill b with c
			else
			    wait d seconds
			end
		end
		
		operation op2(boolean e, element f, string g, integer h)
		    op1 using e,f,g,h
		end
		
		operation op3
			op2 using true, input "username", "secret", 5
		end
		
		operation op4
			op3
		end
		''');
	}
	
	@Test
	def void testOpenStatement() {
		parse(
		'''
		webtest example.ExampleTest

		operation op1(string a)
			open a
			open "url"
		end		
		''');
	}	
	
	@Test
	def void testFillStatement() {
		parse(
		'''
		webtest example.ExampleTest

		operation op1(element a, string b)
			fill a with b
			fill input "username" with "Alice"
		end		
		''');
	}	

	@Test
	def void testClickStatement() {
		parse(
		'''
		webtest example.ExampleTest

		operation op1(element a)
			click a
			click button "next"
		end		
		''');
	}	
	
	@Test
	def void testContextStatement() {
		parse(
		'''
		webtest example.ExampleTest

		page X
		end

		operation op1(element a)
			context a as X
			end
			context div "" as X
			end
		end		

		operation op2(element b)
			context b
			end
		end		
		''');
	}

	@Test
	def void testPrintStatement() {
		parse(
		'''
		webtest example.ExampleTest

		operation op1(string a)
			print a
			print "a"
			print "x", true, 5, input "username"
		end		
		''');
	}	

	@Test
	def void testAssertStatement() {
		parse(
		'''
		webtest example.ExampleTest

		operation op1(boolean a)
			assert a
			assert true
		end		
		''');
	}	

	@Test
	def void testWaitStatement() {
		parse(
		'''
		webtest example.ExampleTest

		operation op1(integer a, boolean b)
			wait a seconds until b
			wait 5 seconds until true
		end		

		operation op2(integer c)
			wait c seconds
			wait 5 seconds
		end		

		operation op3(boolean d)
			wait until d
			wait until true
		end		
		''');
	}	
	
}
